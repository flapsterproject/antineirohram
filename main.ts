import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const CREATOR_USERNAME = "amangeldimasakov";
const TARGET_BOT_USERNAME = "neirohambot";

// --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç–µ) ---
const mathSessions: Record<string, boolean> = {}; // –∫–ª—é—á: `${chatId}:${userId}`

// --- –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π ---
function solveMath(expr: string): string {
  try {
    const sanitized = expr.replace(/[^-()\d/*+.]/g, "");
    // eslint-disable-next-line no-eval
    const result = eval(sanitized);
    return `${expr} = ${result}`;
  } catch {
    return `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å: "${expr}" üòÖ`;
  }
}

// --- –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å) ---
const RESPONSES = [
  { keywords: ["–ø—Ä–∏–≤–µ—Ç"], reply: "–ü—Ä–∏–≤–µ—Ç üòè" },
  { keywords: ["–∫–∞–∫ –¥–µ–ª–∞"], reply: "–ö–∞–∫ –æ–±—ã—á–Ω–æ ‚Äî —Å–∞—Ä–∫–∞–∑–º —Å–ø–∞—Å–∞–µ—Ç —ç—Ç–æ—Ç –º–∏—Ä üôÉ" },
  { keywords: ["—à—É—Ç–∫–∞"], reply: "–•–∞—Ö–∞, —Å–º–µ—à–Ω–æ üòè" },
];

// --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, reply_to_message_id: replyTo }),
  });
}

// --- Webhook ---
serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) return new Response("ok");
  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });

  const update = await req.json();
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const messageId = msg?.message_id;
  const userId = msg?.from?.id;
  const text = msg?.text;
  const username = msg?.from?.username;

  if (!chatId || !text || !userId) return new Response("ok");

  const sessionKey = `${chatId}:${userId}`;

  // --- –ö–æ–º–∞–Ω–¥–∞ /math ---
  if (text.toLowerCase().startsWith("/math")) {
    mathSessions[sessionKey] = true;
    await sendMessage(chatId, "–†–µ–∂–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä, –∏ —è —Ä–µ—à—É –µ–≥–æ üòé", messageId);
    return new Response("ok");
  }

  // --- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è ---
  if (mathSessions[sessionKey]) {
    const solution = solveMath(text);
    await sendMessage(chatId, solution, messageId);
    mathSessions[sessionKey] = false; // –≤—ã–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é
    return new Response("ok");
  }

  // --- –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ---
  for (const r of RESPONSES) {
    if (r.keywords.some(kw => text.toLowerCase().includes(kw))) {
      await sendMessage(chatId, r.reply, messageId);
      return new Response("ok");
    }
  }

  return new Response("ok");
});

