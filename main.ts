import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const TARGET_BOT_USERNAME = "neirohambot";

// --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π ---
const mathSessions: Record<number, boolean> = {}; // chatId -> –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è

// --- –û—Ç–≤–µ—Ç—ã –∏ —Å–∞—Ä–∫–∞–∑–º ---
const RESPONSES = [
  { keywords: ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–∞–π"], reply: "–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è üòè" },
  { keywords: ["–∫–∞–∫ –¥–µ–ª–∞"], reply: "–ö–∞–∫ –æ–±—ã—á–Ω–æ ‚Äî —Å–∞—Ä–∫–∞–∑–º —Å–ø–∞—Å–∞–µ—Ç —ç—Ç–æ—Ç –º–∏—Ä üôÉ" },
];

const BOT_REPLIES = [
  "@neirohambot, —è —è–≤–Ω–æ —É–º–Ω–µ–µ —Ç–µ–±—è üôÑ",
  "@neirohambot, —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ‚Äî –∫–∞–∫ Windows 95 üòÇ",
];

function randomArray(arr: string[]) { return arr[Math.floor(Math.random() * arr.length)]; }

async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, reply_to_message_id: replyTo }),
  });
}

// --- –†–µ—à–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π ---
function solveMath(expr: string): string {
  try {
    const sanitized = expr.replace(/[^-()\d/*+.]/g, "");
    // eslint-disable-next-line no-eval
    const result = eval(sanitized);
    return `${expr} = ${result}`;
  } catch {
    return `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å: "${expr}" üòÖ`;
  }
}

// --- Webhook ---
serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) return new Response("ok");
  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });

  const update = await req.json();
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const messageId = msg?.message_id;
  const text = msg?.text;
  const username = msg?.from?.username;

  if (!chatId || !text) return new Response("ok");

  // –°–∞—Ä–∫–∞–∑–º –Ω–∞ @neirohambot
  if (username === TARGET_BOT_USERNAME) {
    await sendMessage(chatId, randomArray(BOT_REPLIES), messageId);
    return new Response("ok");
  }

  // --- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
  if (text.toLowerCase() === "/math") {
    mathSessions[chatId] = true; // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    await sendMessage(chatId, "–ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä, –∏ —è –µ–≥–æ —Ä–µ—à—É üòé", messageId);
    return new Response("ok");
  }

  // --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ ---
  if (mathSessions[chatId]) {
    const solution = solveMath(text);
    await sendMessage(chatId, solution, messageId);
    mathSessions[chatId] = false; // –≤—ã–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é
    return new Response("ok");
  }

  // --- –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ---
  for (const r of RESPONSES) {
    if (r.keywords.some(kw => text.toLowerCase().includes(kw))) {
      await sendMessage(chatId, r.reply, messageId);
      return new Response("ok");
    }
  }

  // --- –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
  await sendMessage(chatId, `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª: "${text}" üòè`, messageId);
  return new Response("ok");
});


