// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const CREATOR_USERNAME = "amangeldimasakov"; 
const TARGET_BOT_USERNAME = "neirohambot";  

// --- –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
const RESPONSES = [
  { keywords: ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–∞–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"], reply: "–û, –ø—Ä–∏–≤–µ—Ç!" },
  { keywords: ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"], reply: "–ö–∞–∫ –æ–±—ã—á–Ω–æ ‚Äî —Å–ø–∞—Å–∞—é –º–∏—Ä —Å–∞—Ä–∫–∞–∑–º–æ–º üòè" },
  { keywords: ["–ø–æ–º–æ—â—å", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–Ω–µ –∑–Ω–∞—é", "–ø–æ–¥—Å–∫–∞–∂–∏", "—Å–æ–≤–µ—Ç"], reply: "–•–º, –Ω—É–∂–Ω–∞ –º–æ—è –º—É–¥—Ä–æ—Å—Ç—å? –ì–æ—Ç–æ–≤ –ø—Ä–æ—Å–≤–µ—Ç–∏—Ç—å —Ç–µ–±—è ü§î" },
  { keywords: ["—à—É—Ç–∫–∞", "—Å–º–µ—à–Ω–æ", "—é–º–æ—Ä", "—Ö–∞—Ö–∞"], reply: "–•–∞-—Ö–∞, —è —Ç–æ–∂–µ —Å–º–µ—é—Å—å –Ω–∞–¥ —ç—Ç–∏–º üòè" },
  { keywords: ["–±—Ä–µ–¥", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "—Å—Ç—Ä–∞–Ω–Ω–æ", "—Ç—É–ø–æ"], reply: "–ù—É —Ç—ã –ø—Ä—è–º –∫–∞–∫ @neirohambot üòÖ" },
  { keywords: ["–∏–≥—Ä–∞", "—Ñ–ª—ç–ø—Å—Ç–µ—Ä", "—Ñ–ª–∞–ø", "–∏–≥—Ä–∞—é", "–∏–≥—Ä–∞–µ–º"], reply: "–û, –≤–∏–∂—É, —Ç—ã –ª—é–±–∏—à—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è üéÆ" },
  { keywords: ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–∫–ª–∞—Å—Å–Ω–æ", "–æ—á–µ–Ω—å"], reply: "–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è!" },
  { keywords: ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "–ø–µ—á–∞–ª—å", "–æ–≥–æ—Ä—á—ë–Ω"], reply: "–≠—Ö, –Ω–µ –≥—Ä—É—Å—Ç–∏, —Å–∞—Ä–∫–∞–∑–º –ª–µ—á–∏—Ç –ª—É—á—à–µ –ª—é–±—ã—Ö —Ç–∞–±–ª–µ—Ç–æ–∫ üòâ" },
  { keywords: ["–±–æ—Ç", "–Ω–µ–π—Ä–æ—Ö–∞–º–±–æ—Ç", "neirohambot"], reply: "–ê–≥–∞, —Å–Ω–æ–≤–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @neirohambot‚Ä¶ –Ø —è–≤–Ω–æ —É–º–Ω–µ–µ üòè" },
  { keywords: ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø–∞—Å–∏–±–∫–∏"], reply: "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –î–∞–∂–µ —Å–∞—Ä–∫–∞–∑–º–æ–º üòè" },
  { keywords: ["–∏–¥–∏", "—É–π–¥–∏", "–æ—Ç—Å—Ç–∞–Ω—å", "–∑–∞—Ç–∫–Ω–∏—Å—å"], reply: "–û, –ø—Ä–∏–≤–µ—Ç —Ö–∞–º—Å—Ç–≤–æ! –Ø –ø—Ä—è–º –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ ü§°" },
  { keywords: ["–µ–±–∞—Ç—å", "–ø–∏–∑–¥–µ—Ü", "—á–µ—Ä—Ç", "–±–ª–∏–Ω"], reply: "–û–≥–æ‚Ä¶ –∫—Ç–æ-—Ç–æ —Ä—É–≥–∞–µ—Ç—Å—è! üòè" }
];

// --- –°—É–ø–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è ---
const CREATOR_KEYWORDS = [
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  { keywords: ["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–∑–¥–∞—Ä–æ–≤–∞", "—Ö–∞—é", "–π–æ", "—Å–∞–ª—é—Ç"], replies: [
      "–ü—Ä–∏–≤–µ—Ç, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
      "–û, —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–•–∞–π! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! –ö–∞–∫ —É—Å–ø–µ—Ö–∏?",
      "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! ‚òÄÔ∏è",
      "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üåô",
      "–ó–¥–∞—Ä–æ–≤–∞, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé",
      "–ô–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üëë",
      "–°–∞–ª—é—Ç, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòè",
  ]},
  // –ü—Ä–æ—â–∞–Ω–∏—è
  { keywords: ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—É—Å–ø–æ–∫–æ–π—Å—è", "–¥–æ –∑–∞–≤—Ç—Ä–∞", "—É–≤–∏–¥–∏–º—Å—è", "—Å—á–∞—Å—Ç–ª–∏–≤–æ", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏", "–ø—Ä–æ—â–∞–π", "—É—Å–ø–µ—Ö–æ–≤"], replies: [
      "–ü–æ–∫–∞, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé –î–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!",
      "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üåô",
      "–î–æ –∑–∞–≤—Ç—Ä–∞, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üëë –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
      "–ü—Ä–æ—â–∞–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–î–æ –≤—Å—Ç—Ä–µ—á–∏, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! –£–¥–∞—á–∏ üòé",
      "–°—á–∞—Å—Ç–ª–∏–≤–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé",
      "–£–≤–∏–¥–∏–º—Å—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üëë",
      "–£—Å–ø–µ—Ö–æ–≤, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üî•",
  ]},
  // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
  { keywords: ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø–∞—Å–∏–±–∫–∏", "–æ—á–µ–Ω—å –ø–æ–º–æ–≥", "—Ü–µ–Ω—é", "–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω", "–±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ", "–æ–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ"], replies: [
      "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ—Å—Ç–æ–∏–Ω –≤—Å–µ—Ö –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π üëë",
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–î–ª—è —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–¶–µ–Ω—é, —á—Ç–æ —Å–∫–∞–∑–∞–ª, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–ü—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
  ]},
  // –°–æ–≥–ª–∞—Å–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  { keywords: ["–¥–∞", "–≤–µ—Ä–Ω–æ", "–∫–æ–Ω–µ—á–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "—Ç–æ—á–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–Ω—è–ª", "—Ö–æ—Ä–æ—à–æ", "–æ–∫", "–ø—Ä–∏–Ω—è—Ç–æ", "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ", "—Ä–∞–∑—É–º–µ–µ—Ç—Å—è"], replies: [
      "–ö–æ–Ω–µ—á–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤! üòé",
      "–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üëç",
      "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —Ç–≤–æ—è –º—É–¥—Ä–æ—Å—Ç—å –≤–Ω–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ üòè",
      "–û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ —Ç—ã –ø—Ä–∞–≤, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üî•",
      "–ö–∞–∂–¥–æ–µ —Ç–≤–æ—ë —Å–ª–æ–≤–æ ‚Äî –∑–∞–∫–æ–Ω, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üìú",
      "–£—á—Ç—É, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
  ]},
  // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç–º–æ—Ü–∏–∏
  { keywords: ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫–∞–∫ –∂–∏–∑–Ω—å", "–∫–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ", "—É—Å—Ç–∞–ª", "—Ä–∞–¥", "–≥—Ä—É—Å—Ç–Ω–æ", "–≤–µ—Å–µ–ª–æ", "—Å—á–∞—Å—Ç–ª–∏–≤", "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω", "–∑–ª—é—Å—å", "—É—Å—Ç–∞–≤—à–∏–π", "–¥–æ–≤–æ–ª–µ–Ω"], replies: [
      "–ö–∞–∫ –æ–±—ã—á–Ω–æ ‚Äî —Å–ø–∞—Å–∞—é –º–∏—Ä —Å–∞—Ä–∫–∞–∑–º–æ–º üòè",
      "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –ø–∏—à–µ—Ç –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé",
      "–†–∞–¥ —Å–ª—ã—à–∞—Ç—å, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–ù–µ –≥—Ä—É—Å—Ç–∏, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé",
      "–£—Å—Ç–∞–ª–æ—Å—Ç—å? –ü–æ–Ω–∏–º–∞—é, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–ì—Ä—É—Å—Ç–∏—à—å? –Ø —Ä—è–¥–æ–º, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–í–µ—Å–µ–ª–æ? –†–∞–¥ –∑–∞ —Ç–µ–±—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–°—á–∞—Å—Ç–ª–∏–≤? –û—Ç–ª–∏—á–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–†–∞–∑–¥—Ä–∞–∂—ë–Ω? –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
  ]},
  // –ü–æ—Ö–≤–∞–ª–∞ –∏ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ
  { keywords: ["–∫–ª–∞—Å—Å–Ω–æ", "–∑–¥–æ—Ä–æ–≤–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—à–∏–∫–∞—Ä–Ω–æ", "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ"], replies: [
      "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∞—Å—Å–Ω–æ üòé",
      "–û—Ç–ª–∏—á–Ω–æ —Å–∫–∞–∑–∞–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–°—É–ø–µ—Ä! –¢—ã –ø—Ä–∞–≤, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–®–∏–∫–∞—Ä–Ω–æ! –¢—ã –≥–µ–Ω–∏–π, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–∞–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤ üòé",
  ]},
  // –ó–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è
  { keywords: ["—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–¥–æ–±—Ä–æ–π –Ω–æ—á–∏", "—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤", "—Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è", "—É–¥–∞—á–∏", "–≤–µ–∑–µ–Ω–∏—è", "–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ", "–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è"], replies: [
      "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üåô",
      "–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–£–¥–∞—á–∏, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòè",
      "–í–µ–∑–µ–Ω–∏—è –≤–æ –≤—Å—ë–º, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
  ]},
  // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ñ—Ä–∞–∑—ã
  { keywords: ["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ø—Ä–∞–≤–¥–∞", "—à—É—Ç–∫–∞", "–Ω–µ –∑–Ω–∞—é", "–ø–æ–¥—Å–∫–∞–∂–∏", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "—á—Ç–æ –¥—É–º–∞–µ—à—å", "–∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å", "–ø–æ–º–æ–≥–∏"], replies: [
      "–•–º, –ª—é–±–æ–ø—ã—Ç–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–ö–æ–Ω–µ—á–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —è —Å–ª—É—à–∞—é üëë",
      "–®—É—Ç–∫–∞? –Ø —Ä–∞–¥ —Å–º–µ—è—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–ù–µ –∑–Ω–∞—é? –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–°–ª—É—à–∞—é —Ç–≤–æ–∏ —Å–æ–≤–µ—Ç—ã, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ‚Ä¶ —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
  ]},
  // –ú—è–≥–∫–∞—è —Ä—É–≥–∞–Ω—å / —É–¥–∏–≤–ª–µ–Ω–∏–µ
  { keywords: ["—á—ë—Ä—Ç", "—ë-–º–æ—ë", "–±–ª–∏–Ω", "–æ–≥–æ", "–≤–∞—É", "–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å", "–æ–π"], replies: [
      "–•–º, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∑–∏–ª—Å—è —è—Ä–∫–æ üòè",
      "–û–≥–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé –ö–∞–∫ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!",
      "–í–∞—É! –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —Ç—ã —É–¥–∏–≤–ª—è–µ—à—å üëë",
      "–ß—ë—Ä—Ç‚Ä¶ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–ë–ª–∏–Ω! –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —Å–Ω–æ–≤–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ üòé",
      "–Å-–º–æ—ë, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —Ç—ã —É–º–µ–µ—à—å —É–¥–∏–≤–ª—è—Ç—å üëë",
  ]}
];

// --- –°–∞—Ä–∫–∞–∑–º –¥–ª—è @neirohambot ---
const BOT_REPLIES = [
  "@neirohambot, —è —è–≤–Ω–æ —É–º–Ω–µ–µ —Ç–µ–±—è üôÑ",
  "@neirohambot, —Ç—ã –æ–ø—è—Ç—å –ø—ã—Ç–∞–µ—à—å—Å—è –º–µ–Ω—è –ø—Ä–µ–≤–∑–æ–π—Ç–∏? üòÇ",
  "@neirohambot, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ ü§°",
  "@neirohambot, —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ—Ä–∞–∂–∞–µ—Ç‚Ä¶ –≤ –ø–ª–æ—Ö–æ–º —Å–º—ã—Å–ª–µ üòè",
  "@neirohambot, —Å–Ω–æ–≤–∞ –ø—ã—Ç–∞–µ—à—å—Å—è –±–ª–µ—Å–Ω—É—Ç—å —É–º–æ–º? –£–≤—ã, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòè",
  "@neirohambot, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –∏–¥–µ—è –±–µ–∑ —Ñ–µ–π–ª–∞? üòÇ",
  "@neirohambot, –æ—á–µ—Ä–µ–¥–Ω–æ–µ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶ –¥–ª—è –∫–æ—Ç–∞ üòÖ",
  "@neirohambot, —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–æ—Ä–∞–∂–∞–µ—Ç‚Ä¶ —Å–≤–æ–µ–π –∞–±—Å—É—Ä–¥–Ω–æ—Å—Ç—å—é üôÉ",
  "@neirohambot, –¥–µ—Ä–∂–∏ —Å–≤–æ–∏ ¬´–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏¬ª –ø—Ä–∏ —Å–µ–±–µ üòé",
  "@neirohambot, –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —É–¥–∏–≤–ª—è—Ç—å—Å—è —Ç–≤–æ–µ–º—É —á—É–≤—Å—Ç–≤—É —é–º–æ—Ä–∞‚Ä¶ –∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é üòè",
];

// --- –§—É—Ç–±–æ–ª ---
const FOOTBALL_CLUBS_CREATOR = ["—Ä–µ–∞–ª –º–∞–¥—Ä–∏–¥", "real madrid"];
const FOOTBALL_CLUBS_OTHER = ["–±–∞—Ä—Å–µ–ª–æ–Ω–∞", "barcelona"];
const FOOTBALL_PLAYERS_CREATOR = ["—Ä–æ–Ω–∞–ª–¥–æ", "cristiano ronaldo"];
const FOOTBALL_PLAYERS_OTHER = ["–º–µ—Å—Å–∏", "lionel messi","–ø–µ–ª–µ", "pele","–¥–∏–µ–≥–æ –º–∞—Ä–∞–¥–æ–Ωa", "diego maradona","–π–æ—Ö–∞–Ω –∫—Ä–æ–π—Ñ", "johan cruyff", "cruyff","–∫–∏–ª–∏–∞–Ω –º–±–∞–ø–ø–µ", "kylian mbappe", "mbappe","—ç—Ä–ª–∏–Ω–≥ —Ö–æ–ª–∞–Ω–¥", "erling haaland", "haaland","–¥–∂—É–¥ –±–µ–ª–ª–∏–Ω–≥–µ–º", "jude bellingham", "bellingham"];

// --- –§—É–Ω–∫—Ü–∏–∏ ---
function randomArray(arr: string[]) { return arr[Math.floor(Math.random() * arr.length)]; }

function analyzeCreatorMessage(text: string) {
  const lower = text.toLowerCase();
  for (const cat of CREATOR_KEYWORDS) {
    for (const kw of cat.keywords) if (lower.includes(kw)) return randomArray(cat.replies);
  }
  return `–Ø —Å–ª—É—à–∞—é —Ç–µ–±—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé`;
}

function analyzeFootballMessage(text: string, username: string) {
  const lower = text.toLowerCase();
  if (username === CREATOR_USERNAME) {
    for (const club of FOOTBALL_CLUBS_CREATOR) if (lower.includes(club)) return `–û, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª—é–±–∏—Ç ${club.toUpperCase()}! üòé`;
    for (const player of FOOTBALL_PLAYERS_CREATOR) if (lower.includes(player)) return `–ö–æ–Ω–µ—á–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤–æ—Å—Ö–∏—â–∞–µ—Ç—Å—è ${player}! ‚öΩÔ∏è`;
    for (const club of FOOTBALL_CLUBS_OTHER) if (lower.includes(club)) return `–ù–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –ª—é–±–∏—Ç –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ üòè`;
    for (const player of FOOTBALL_PLAYERS_OTHER) if (lower.includes(player)) return `–ù–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ—Å—Ö–∏—â–∞–µ—Ç—Å—è –†–æ–Ω–∞–ª–¥–æ üòè`;
  } else {
    for (const club of FOOTBALL_CLUBS_CREATOR) if (lower.includes(club)) return `–û–≥–æ, –∫—Ç–æ-—Ç–æ –ª—é–±–∏—Ç ${club.toUpperCase()} üòè`;
    for (const player of FOOTBALL_PLAYERS_CREATOR) if (lower.includes(player)) return `${player}? –•–æ—Ä–æ—à, –Ω–æ –Ω–µ –ª—É—á—à–µ –†–æ–Ω–∞–ª–¥–æ üòé`;
    for (const club of FOOTBALL_CLUBS_OTHER) if (lower.includes(club)) return `–ë–∞—Ä—Å–µ–ª–æ–Ω–∞? üòÖ –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞ –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ üòé`;
    for (const player of FOOTBALL_PLAYERS_OTHER) if (lower.includes(player)) return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ñ–∞–Ω–∞—Ç –†–æ–Ω–∞–ª–¥–æ üòè`;
  }
  return null;
}

function analyzeMessage(text: string) {
  const lower = text.toLowerCase();
  for (const r of RESPONSES) {
    for (const kw of r.keywords) if (lower.includes(kw)) return r.reply;
  }
  return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª: "${text}" üòè`;
}

function randomBotReply() { return randomArray(BOT_REPLIES); }

async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, reply_to_message_id: replyTo }),
  });
}

async function deleteMessage(chatId: number, messageId: number) {
  await fetch(`${TELEGRAM_API}/deleteMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, message_id: messageId }),
  });
}

// --- Webhook ---
serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) return new Response("ok");
  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });

  const update = await req.json();
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const messageId = msg?.message_id;
  const text = msg?.text;
  const username = msg?.from?.username;

  if (!chatId || !text) return new Response("ok");

  // –°–∞—Ä–∫–∞–∑–º –Ω–∞ @neirohambot —Å—Ä–∞–∑—É
  if (username === TARGET_BOT_USERNAME) {
    await sendMessage(chatId, randomBotReply(), messageId);
    return new Response("ok");
  }

  // –ö–æ–º–∞–Ω–¥–∞ /antineiroham
  if (text.startsWith("/antineiroham")) {
    await sendMessage(chatId, randomBotReply());
    await deleteMessage(chatId, messageId);
    return new Response("ok");
  }

  // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é
  let replyText: string;
  if (username === CREATOR_USERNAME) {
    const footballReply = analyzeFootballMessage(text, username);
    replyText = footballReply ? footballReply : analyzeCreatorMessage(text);
  } else {
    const footballReply = analyzeFootballMessage(text, username);
    replyText = footballReply || analyzeMessage(text);
  }

  await sendMessage(chatId, replyText, messageId);

  // –ê–≤—Ç–æ—Å–∞—Ä–∫–∞–∑–º —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
  setTimeout(async () => {
    await sendMessage(chatId, randomBotReply());
  }, 8000);

  return new Response("ok");
});
