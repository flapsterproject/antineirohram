// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const CREATOR_USERNAME = "amangeldimasakov"; // —Ç–≤–æ–π username –±–µ–∑ @
const TARGET_BOT_USERNAME = "neirohambot";   // –±–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω —Å–∞—Ä–∫–∞–∑–º

// --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
const RESPONSES = [
  { keywords: ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–∞–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"], reply: "–û, –ø—Ä–∏–≤–µ—Ç!" },
  { keywords: ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"], reply: "–ö–∞–∫ –æ–±—ã—á–Ω–æ ‚Äî —Å–ø–∞—Å–∞—é –º–∏—Ä —Å–∞—Ä–∫–∞–∑–º–æ–º üòè" },
  { keywords: ["–ø–æ–º–æ—â—å", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–Ω–µ –∑–Ω–∞—é", "–ø–æ–¥—Å–∫–∞–∂–∏", "—Å–æ–≤–µ—Ç"], reply: "–•–º, –Ω—É–∂–Ω–∞ –º–æ—è –º—É–¥—Ä–æ—Å—Ç—å? –ì–æ—Ç–æ–≤ –ø—Ä–æ—Å–≤–µ—Ç–∏—Ç—å —Ç–µ–±—è ü§î" },
  { keywords: ["—à—É—Ç–∫–∞", "—Å–º–µ—à–Ω–æ", "—é–º–æ—Ä", "—Ö–∞—Ö–∞"], reply: "–•–∞-—Ö–∞, —è —Ç–æ–∂–µ —Å–º–µ—é—Å—å –Ω–∞–¥ —ç—Ç–∏–º üòè" },
  { keywords: ["–±—Ä–µ–¥", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "—Å—Ç—Ä–∞–Ω–Ω–æ", "—Ç—É–ø–æ"], reply: "–ù—É —Ç—ã –ø—Ä—è–º –∫–∞–∫ @neirohambot üòÖ" },
  { keywords: ["–∏–≥—Ä–∞", "—Ñ–ª—ç–ø—Å—Ç–µ—Ä", "—Ñ–ª–∞–ø", "–∏–≥—Ä–∞—é", "–∏–≥—Ä–∞–µ–º"], reply: "–û, –≤–∏–∂—É, —Ç—ã –ª—é–±–∏—à—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è üéÆ" },
  { keywords: ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–∫–ª–∞—Å—Å–Ω–æ", "–æ—á–µ–Ω—å", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ"], reply: "–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è!" },
  { keywords: ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "–ø–µ—á–∞–ª—å", "–æ–≥–æ—Ä—á—ë–Ω"], reply: "–≠—Ö, –Ω–µ –≥—Ä—É—Å—Ç–∏, —Å–∞—Ä–∫–∞–∑–º –ª–µ—á–∏—Ç –ª—É—á—à–µ –ª—é–±—ã—Ö —Ç–∞–±–ª–µ—Ç–æ–∫ üòâ" },
  { keywords: ["–±–æ—Ç", "–Ω–µ–π—Ä–æ—Ö–∞–º–±–æ—Ç", "neirohambot"], reply: "–ê–≥–∞, —Å–Ω–æ–≤–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @neirohambot‚Ä¶ –Ø —è–≤–Ω–æ —É–º–Ω–µ–µ üòè" },
  { keywords: ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø–∞—Å–∏–±–∫–∏"], reply: "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –î–∞–∂–µ —Å–∞—Ä–∫–∞–∑–º–æ–º üòè" },
  { keywords: ["–∏–¥–∏", "—É–π–¥–∏", "–æ—Ç—Å—Ç–∞–Ω—å", "–∑–∞—Ç–∫–Ω–∏—Å—å", "–µ–±–∞—Ç—å"], reply: "–û, –ø—Ä–∏–≤–µ—Ç —Ö–∞–º—Å—Ç–≤–æ! –Ø –ø—Ä—è–º –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ ü§°" },
];

// --- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–∑–¥–∞—Ç–µ–ª—é ---
const CREATOR_REPLIES = [
  "–ü—Ä–∏–≤–µ—Ç, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé –ö–∞–∫ –¥–µ–ª–∞?",
  "–û–≥–æ, —Ç—ã –Ω–∞–ø–∏—Å–∞–ª: \"{text}\", –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üëë",
  "–•–æ—Ä–æ—à–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —è –ø–æ–Ω—è–ª üòé",
  "–¢—ã –æ–ø—è—Ç—å —É–¥–∏–≤–ª—è–µ—à—å –º–µ–Ω—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
  "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòé",
  "–•–º‚Ä¶ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –ø–∏—à–µ—Ç –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üòè",
  "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç: \"{text}\". –Ø —Å–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ üòé",
  "–û, —Å–Ω–æ–≤–∞ –º—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞ –æ—Ç –º–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è üòè",
  "–û—Ç–ª–∏—á–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º üòé",
  "–¢–≤–æ–π —Ç–µ–∫—Å—Ç: \"{text}\" ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π —à–µ–¥–µ–≤—Ä, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
];

// --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è ---
const CREATOR_KEYWORDS = [
  { keywords: ["—è –ø—Ä–∞–≤", "–≤–µ—Ä–Ω–æ", "–∫–æ–Ω–µ—á–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ", "—Ç–æ—á–Ω–æ"], replies: [
      "–ö–æ–Ω–µ—á–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤! üòé",
      "–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üëç",
      "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —Ç–≤–æ—è –º—É–¥—Ä–æ—Å—Ç—å –≤–Ω–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ üòè",
      "–û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ —Ç—ã –ø—Ä–∞–≤, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üî•",
      "–ö–∞–∂–¥–æ–µ —Ç–≤–æ—ë —Å–ª–æ–≤–æ ‚Äî –∑–∞–∫–æ–Ω, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üìú"
  ]},
  { keywords: ["—Ö–æ—Ä–æ—à–æ", "–ø–æ–Ω—è–ª", "–æ–∫", "–ª–∞–¥–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø—Ä–∏–Ω—è—Ç–æ"], replies: [
      "–•–æ—Ä–æ—à–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —É—á—Ç—É üòé",
      "–°–ª—É—à–∞—é —Ç–µ–±—è, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëë",
      "–Ø –≤—Å—ë –ø–æ–Ω—è–ª, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üëç",
      "–û–∫, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, —Ç–≤–æ—è –≤–æ–ª—è üòè"
  ]},
  { keywords: ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø–∞—Å–∏–±–∫–∏", "–æ—á–µ–Ω—å –ø–æ–º–æ–≥", "—Ü–µ–Ω—é"], replies: [
      "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé",
      "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –¥–æ—Å—Ç–æ–∏–Ω –≤—Å–µ—Ö –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π üëë",
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòè",
      "–î–ª—è —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å üòé"
  ]}
];

// --- –°–∞—Ä–∫–∞–∑–º –¥–ª—è @neirohambot ---
const BOT_REPLIES = [
  "@neirohambot, —è —è–≤–Ω–æ —É–º–Ω–µ–µ —Ç–µ–±—è üôÑ",
  "@neirohambot, —Ç—ã –æ–ø—è—Ç—å –ø—ã—Ç–∞–µ—à—å—Å—è –º–µ–Ω—è –ø—Ä–µ–≤–∑–æ–π—Ç–∏? üòÇ",
  "@neirohambot, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ ü§°",
  "@neirohambot, —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ—Ä–∞–∂–∞–µ—Ç‚Ä¶ –≤ –ø–ª–æ—Ö–æ–º —Å–º—ã—Å–ª–µ üòè",
  "@neirohambot, —Å–Ω–æ–≤–∞ –ø—ã—Ç–∞–µ—à—å—Å—è –±–ª–µ—Å–Ω—É—Ç—å —É–º–æ–º? –£–≤—ã, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòè",
  "@neirohambot, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ —É —Ç–µ–±—è –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –∏–¥–µ—è –±–µ–∑ —Ñ–µ–π–ª–∞? üòÇ",
  "@neirohambot, —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–æ—Ä–∞–∂–∞–µ—Ç‚Ä¶ —Å–≤–æ–µ–π –∞–±—Å—É—Ä–¥–Ω–æ—Å—Ç—å—é üôÉ",
  "@neirohambot, –¥–µ—Ä–∂–∏ —Å–≤–æ–∏ ¬´–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏¬ª –ø—Ä–∏ —Å–µ–±–µ üòé",
  "@neirohambot, —è –±—ã –∞–ø–ª–æ–¥–∏—Ä–æ–≤–∞–ª, –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ —Å–º–µ—à–Ω–æ üòÖ",
  "@neirohambot, –Ω—É –∫—Ç–æ –∂–µ —Ç–∞–∫ –¥—É–º–∞–µ—Ç? ü§î –î–∞–∂–µ –∫–æ—Ç—ã —Å–º–µ—é—Ç!"
];

// --- –§—É—Ç–±–æ–ª ---
const FOOTBALL_CLUBS_CREATOR = ["—Ä–µ–∞–ª –º–∞–¥—Ä–∏–¥", "real madrid"];
const FOOTBALL_CLUBS_OTHER = ["–±–∞—Ä—Å–µ–ª–æ–Ω–∞", "barcelona"];
const FOOTBALL_PLAYERS_CREATOR = ["—Ä–æ–Ω–∞–ª–¥–æ", "cristiano ronaldo"];
const FOOTBALL_PLAYERS_OTHER = [
  "–º–µ—Å—Å–∏", "lionel messi", "–ø–µ–ª–µ", "pele",
  "–¥–∏–µ–≥–æ –º–∞—Ä–∞–¥–æ–Ωa", "diego maradona",
  "–π–æ—Ö–∞–Ω –∫—Ä–æ–π—Ñ", "johan cruyff", "cruyff",
  "–∫–∏–ª–∏–∞–Ω –º–±–∞–ø–ø–µ", "kylian mbappe", "mbappe",
  "—ç—Ä–ª–∏–Ω–≥ —Ö–æ–ª–∞–Ω–¥", "erling haaland", "haaland",
  "–¥–∂—É–¥ –±–µ–ª–ª–∏–Ω–≥–µ–º", "jude bellingham", "bellingham"
];

// --- –§—É–Ω–∫—Ü–∏–∏ ---
function randomCreatorReply(text: string) {
  const template = CREATOR_REPLIES[Math.floor(Math.random() * CREATOR_REPLIES.length)];
  return template.replace("{text}", text);
}

function analyzeCreatorSpecial(text: string) {
  const lower = text.toLowerCase();
  for (const group of CREATOR_KEYWORDS) {
    for (const kw of group.keywords) {
      if (lower.includes(kw)) {
        const reply = group.replies[Math.floor(Math.random() * group.replies.length)];
        return reply;
      }
    }
  }
  return null;
}

function analyzeFootballMessage(text: string, username: string) {
  const lower = text.toLowerCase();
  if (username === CREATOR_USERNAME) {
    for (const club of FOOTBALL_CLUBS_CREATOR) if (lower.includes(club)) return `–û, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª—é–±–∏—Ç ${club.toUpperCase()}! üòé`;
    for (const player of FOOTBALL_PLAYERS_CREATOR) if (lower.includes(player)) return `–ö–æ–Ω–µ—á–Ω–æ, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤–æ—Å—Ö–∏—â–∞–µ—Ç—Å—è ${player}! ‚öΩÔ∏è`;
    for (const club of FOOTBALL_CLUBS_OTHER) if (lower.includes(club)) return `–ù–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –ª—é–±–∏—Ç –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ üòè`;
    for (const player of FOOTBALL_PLAYERS_OTHER) if (lower.includes(player)) return `–ù–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ—Å—Ö–∏—â–∞–µ—Ç—Å—è –†–æ–Ω–∞–ª–¥–æ üòè`;
  } else {
    for (const club of FOOTBALL_CLUBS_CREATOR) if (lower.includes(club)) return `–û–≥–æ, –∫—Ç–æ-—Ç–æ –ª—é–±–∏—Ç ${club.toUpperCase()} üòè`;
    for (const player of FOOTBALL_PLAYERS_CREATOR) if (lower.includes(player)) return `${player}? –•–æ—Ä–æ—à, –Ω–æ –Ω–µ –ª—É—á—à–µ –†–æ–Ω–∞–ª–¥–æ üòé`;
    for (const club of FOOTBALL_CLUBS_OTHER) if (lower.includes(club)) return `–ë–∞—Ä—Å–µ–ª–æ–Ω–∞? üòÖ –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞ –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ üòé`;
    for (const player of FOOTBALL_PLAYERS_OTHER) if (lower.includes(player)) return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ñ–∞–Ω–∞—Ç –†–æ–Ω–∞–ª–¥–æ üòè`;
  }
  return null;
}

function analyzeMessage(text: string) {
  const lower = text.toLowerCase();
  for (const r of RESPONSES) {
    for (const kw of r.keywords) if (lower.includes(kw)) return r.reply;
  }
  return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª: "${text}" üòè`;
}

function randomBotReply() {
  return BOT_REPLIES[Math.floor(Math.random() * BOT_REPLIES.length)];
}

async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: chatId, text, reply_to_message_id: replyTo }),
  });
}

// --- Webhook ---
serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) return new Response("ok");
  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });

  const update = await req.json();
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const messageId = msg?.message_id;
  const text = msg?.text;
  const username = msg?.from?.username;

  if (!chatId || !text) return new Response("ok");

  // –°–∞—Ä–∫–∞–∑–º –Ω–∞ @neirohambot
  if (username === TARGET_BOT_USERNAME) {
    await sendMessage(chatId, randomBotReply(), messageId);
    return new Response("ok");
  }

  // –ö–æ–º–∞–Ω–¥–∞ /antineiroham
  if (text.startsWith("/antineiroham")) {
    await sendMessage(chatId, randomBotReply());
    return new Response("ok");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  let replyText: string;
  if (username === CREATOR_USERNAME) {
    const specialReply = analyzeCreatorSpecial(text);
    const footballReply = analyzeFootballMessage(text, username);
    replyText = specialReply || footballReply || randomCreatorReply(text);
  } else {
    const footballReply = analyzeFootballMessage(text, username);
    replyText = footballReply || analyzeMessage(text);
  }

  await sendMessage(chatId, replyText, messageId);

  // –ê–≤—Ç–æ—Å–∞—Ä–∫–∞–∑–º –∫ @neirohambot —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
  setTimeout(async () => {
    await sendMessage(chatId, randomBotReply());
  }, 8000);

  return new Response("ok");
});

