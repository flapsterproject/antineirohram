// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const kv = await Deno.openKv();

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm"; // change this
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;

// üëá ID –±–æ—Ç–∞ @neirohambot (–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
const BAD_BOT_ID = 123456789;

// –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
const sarcasticReplies = [
  "–û, –Ω–∞—à –ª—é–±–∏–º—ã–π –æ—Ä–∞—Ç–æ—Ä —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ üòè",
  "–ë–µ–∑ —Ç–µ–±—è —Ç—É—Ç —Ç–∞–∫ —Å–∫—É—á–Ω–æ –±—ã–ª–æ –±—ã üòÇ",
  "–ú–∏—Ä –∑–∞—Ç–∞–∏–ª –¥—ã—Ö–∞–Ω–∏–µ, —á–∏—Ç–∞—è —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ ü§°",
  "–¢–∞–∫ –≥–ª—É–±–æ–∫–æ, —á—Ç–æ —è —á—É—Ç—å –Ω–µ —É—Ç–æ–Ω—É–ª üôÉ",
  "–ì–µ–Ω–∏–π –º—ã—Å–ª–∏ –∏ –æ—Ç–µ—Ü —Å–∞—Ä–∫–∞–∑–º–∞ ‚ú®",
  "–õ—É—á—à–µ –±—ã —Ç—ã –∫–Ω–∏–≥—É –Ω–∞–ø–∏—Å–∞–ª üìñ",
  "–ù—É –≤—Å—ë, –ø–æ—à—ë–ª –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —ç—Ç–æ –≤ —Ü–∏—Ç–∞—Ç–Ω–∏–∫ üò¨",
];
const getRandomReply = () =>
  sarcasticReplies[Math.floor(Math.random() * sarcasticReplies.length)];

serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) {
    return new Response("Bot is running.", { status: 200 });
  }

  if (req.method !== "POST") {
    return new Response("Method Not Allowed", { status: 405 });
  }

  const update = await req.json();
  const message = update.message;
  const callbackQuery = update.callback_query;
  const chatId = message?.chat?.id || callbackQuery?.message?.chat?.id;
  const text = message?.text;
  const fromId = message?.from?.id;
  const messageId = callbackQuery?.message?.message_id;

  if (!chatId) return new Response("No chat ID", { status: 200 });

  // üëâ —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–ª–æ—Ö–æ–≥–æ –±–æ—Ç–∞
  if (fromId === BAD_BOT_ID && text) {
    const reply = getRandomReply();

    await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text: reply,
        reply_to_message_id: message.message_id,
      }),
    });
  }

  // –û—Ç–≤–µ—Ç –Ω–∞ callback_query (—á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª "loading")
  if (callbackQuery) {
    await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        callback_query_id: callbackQuery.id,
      }),
    });
  }

  return new Response("OK", { status: 200 });
});
