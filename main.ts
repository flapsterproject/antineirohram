// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const CREATOR_USERNAME = "amangeldimasakov";
const TARGET_BOT_USERNAME = "neirohambot";

// ‚ö°Ô∏è API DeepSeek (–Ω—É–∂–µ–Ω –∫–ª—é—á)
const DEEPSEEK_API_KEY = "sk-7469b5c2f36c454fbe32173f08dff53f";
const DEEPSEEK_URL = "https://api.deepseek.com/v1/chat/completions";

// --- —Ç–≤–æ–∏ —Å–ª–æ–≤–∞—Ä–∏ (RESPONSES, CREATOR_KEYWORDS, BOT_REPLIES –∏ —Ç.–ø. –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å) ---
// ...

// --- –£—Ç–∏–ª–∏—Ç—ã ---
function randomArray(arr: string[]) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// DeepSeek –∑–∞–ø—Ä–æ—Å
async function generateSarcasmWithAI(prompt: string): Promise<string> {
  try {
    const res = await fetch(DEEPSEEK_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${DEEPSEEK_API_KEY}`,
      },
      body: JSON.stringify({
        model: "deepseek-chat", // —É–∫–∞–∂–∏ –º–æ–¥–µ–ª—å
        messages: [
          { role: "system", content: "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, –∏–Ω–æ–≥–¥–∞ —Å —é–º–æ—Ä–æ–º." },
          { role: "user", content: prompt },
        ],
        max_tokens: 100,
      }),
    });

    const data = await res.json();
    return data.choices?.[0]?.message?.content?.trim() || "–°–∞—Ä–∫–∞–∑–º –ø–æ—Ç–µ—Ä—è–ª—Å—è üôÉ";
  } catch (e) {
    console.error("DeepSeek error:", e);
    return "–£ –º–µ–Ω—è —Å–∞—Ä–∫–∞–∑–º —Å–ª–æ–º–∞–ª—Å—è ü§ñ";
  }
}

async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_to_message_id: replyTo,
    }),
  });
}

// --- Webhook ---
serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) return new Response("ok");
  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });

  const update = await req.json();
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const messageId = msg?.message_id;
  const text = msg?.text;
  const username = msg?.from?.username;

  if (!chatId || !text) return new Response("ok");

  // –°–∞—Ä–∫–∞–∑–º –Ω–∞ @neirohambot
  if (username === TARGET_BOT_USERNAME) {
    await sendMessage(chatId, randomArray(BOT_REPLIES), messageId);
    return new Response("ok");
  }

  // –ö–æ–º–∞–Ω–¥–∞ /antineiroham
  if (text.startsWith("/antineiroham")) {
    await sendMessage(chatId, randomArray(BOT_REPLIES));
    return new Response("ok");
  }

  // --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ ---
  let replyText: string | null = null;

  if (username === CREATOR_USERNAME) {
    const footballReply = analyzeFootballMessage(text, username);
    replyText = footballReply ? footballReply : analyzeCreatorMessage(text);
  } else {
    const footballReply = analyzeFootballMessage(text, username);
    replyText = footballReply || analyzeMessage(text);
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Üí DeepSeek
  if (!replyText || replyText.includes("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª")) {
    replyText = await generateSarcasmWithAI(text);
  }

  await sendMessage(chatId, replyText, messageId);

  // –ê–≤—Ç–æ—Å–∞—Ä–∫–∞–∑–º —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
  setTimeout(async () => {
    await sendMessage(chatId, randomArray(BOT_REPLIES));
  }, 8000);

  return new Response("ok");
});
