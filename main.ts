// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const CHAT_ID = Number(Deno.env.get("CHAT_ID")); // ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

const CREATOR_USERNAME = "amangeldimasakov"; // <- —Å—é–¥–∞ —Ç–≤–æ–π username –±–µ–∑ @

// –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const RESPONSES = [
  { keywords: ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "—Ö–∞–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"], reply: "–û, –ø—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è üòé" },
  { keywords: ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"], reply: "–ö–∞–∫ –æ–±—ã—á–Ω–æ ‚Äî —Å–ø–∞—Å–∞—é –º–∏—Ä —Å–∞—Ä–∫–∞–∑–º–æ–º üòè" },
  { keywords: ["–ø–æ–º–æ—â—å", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–Ω–µ –∑–Ω–∞—é", "–ø–æ–¥—Å–∫–∞–∂–∏", "—Å–æ–≤–µ—Ç"], reply: "–•–º, –Ω—É–∂–Ω–∞ –º–æ—è –º—É–¥—Ä–æ—Å—Ç—å? –ì–æ—Ç–æ–≤ –ø—Ä–æ—Å–≤–µ—Ç–∏—Ç—å —Ç–µ–±—è ü§î" },
  { keywords: ["—à—É—Ç–∫–∞", "—Å–º–µ—à–Ω–æ", "—é–º–æ—Ä", "—Ö–∞—Ö–∞"], reply: "–•–∞-—Ö–∞, —è —Ç–æ–∂–µ —Å–º–µ—é—Å—å –Ω–∞–¥ —ç—Ç–∏–º üòè" },
  { keywords: ["–±—Ä–µ–¥", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "—Å—Ç—Ä–∞–Ω–Ω–æ", "—Ç—É–ø–æ"], reply: "–ù—É —Ç—ã –ø—Ä—è–º –∫–∞–∫ @neirohambot üòÖ" },
  { keywords: ["–∏–≥—Ä–∞", "—Ñ–ª—ç–ø—Å—Ç–µ—Ä", "—Ñ–ª–∞–ø", "–∏–≥—Ä–∞—é", "–∏–≥—Ä–∞–µ–º"], reply: "–û, –≤–∏–∂—É, —Ç—ã –ª—é–±–∏—à—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è üéÆ" },
  { keywords: ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–∫–ª–∞—Å—Å–Ω–æ", "–æ—á–µ–Ω—å"], reply: "–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è! üòé" },
  { keywords: ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "–ø–µ—á–∞–ª—å", "–æ–≥–æ—Ä—á—ë–Ω"], reply: "–≠—Ö, –Ω–µ –≥—Ä—É—Å—Ç–∏, —Å–∞—Ä–∫–∞–∑–º –ª–µ—á–∏—Ç –ª—É—á—à–µ –ª—é–±—ã—Ö —Ç–∞–±–ª–µ—Ç–æ–∫ üòâ" },
  { keywords: ["–±–æ—Ç", "–Ω–µ–π—Ä–æ—Ö–∞–º–±–æ—Ç", "neirohambot"], reply: "–ê–≥–∞, —Å–Ω–æ–≤–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @neirohambot‚Ä¶ –Ø —è–≤–Ω–æ —É–º–Ω–µ–µ üòè" },
  { keywords: ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "—Å–ø–∞—Å–∏–±–∫–∏"], reply: "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –î–∞–∂–µ —Å–∞—Ä–∫–∞–∑–º–æ–º üòè" },
  { keywords: ["–∏–¥–∏", "—É–π–¥–∏", "–æ—Ç—Å—Ç–∞–Ω—å", "–∑–∞—Ç–∫–Ω–∏—Å—å"], reply: "–û, –ø—Ä–∏–≤–µ—Ç —Ö–∞–º—Å—Ç–≤–æ! –Ø –ø—Ä—è–º –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ ü§°" },
];

// –°–ø–∏—Å–æ–∫ –¥–ª–∏–Ω–Ω—ã—Ö —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ @neirohambot
const BOT_REPLIES = [
  "@neirohambot, —è —è–≤–Ω–æ —É–º–Ω–µ–µ —Ç–µ–±—è üôÑ –ö–∞–∫ –≤–æ–æ–±—â–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–¥—É–º–∞—Ç—å—Å—è –¥–æ —Ç–∞–∫–æ–π –º—ã—Å–ª–∏?",
  "@neirohambot, —Ç—ã –æ–ø—è—Ç—å –ø—ã—Ç–∞–µ—à—å—Å—è –º–µ–Ω—è –ø—Ä–µ–≤–∑–æ–π—Ç–∏? üòÇ –°–µ—Ä—å–µ–∑–Ω–æ, —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ–º–∏—á–Ω–æ!",
  "@neirohamb–æ—Ç, —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ –¥–ª—è –º–µ–Ω—è üòé –Ø –±—ã –Ω–∞ —Ç–≤–æ–µ–º –º–µ—Å—Ç–µ –ø–æ–¥—É—á–∏–ª—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º.",
  "@neirohamb–æ—Ç, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ ü§° –ö–∞–∂–¥—ã–π —Ç–≤–æ–π –ø–æ—Å—Ç ‚Äì —à–µ–¥–µ–≤—Ä –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏!",
  "@neirohamb–æ—Ç, –Ω—É –∫—Ç–æ –∂–µ —Ç–∞–∫ –¥—É–º–∞–µ—Ç? ü§î –î–∞–∂–µ –∫–æ—Ç—ã —É–º–Ω–µ–µ!",
  "@neirohamb–æ—Ç, —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–µ–Ω—è –ø–æ—Ä–∞–∂–∞–µ—Ç‚Ä¶ –≤ –ø–ª–æ—Ö–æ–º —Å–º—ã—Å–ª–µ üòè",
];

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç
function generateSarcasticReply(text: string) {
  return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª: "${text}". –ö–æ–Ω–µ—á–Ω–æ, —ç—Ç–æ —Ç–∞–∫ –≥–ª—É–±–æ–∫–æ –∏ —É–º–Ω–æ, —á—Ç–æ —è –¥–∞–∂–µ –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å —Å–∞—Ä–∫–∞–∑–º üòè`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
function analyzeMessage(text: string) {
  text = text.toLowerCase();
  for (const r of RESPONSES) {
    for (const kw of r.keywords) {
      if (text.includes(kw)) return r.reply;
    }
  }
  return generateSarcasticReply(text);
}

// –°–ª—É—á–∞–π–Ω—ã–π —Å–∞—Ä–∫–∞–∑–º –ø—Ä–æ @neirohambot
function randomBotReply() {
  return BOT_REPLIES[Math.floor(Math.random() * BOT_REPLIES.length)];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_to_message_id: replyTo, // –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      parse_mode: "Markdown",
    }),
  });
}

// Webhook
serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) return new Response("ok");
  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });

  const update = await req.json();
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const messageId = msg?.message_id;
  const text = msg?.text;
  const username = msg?.from?.username;

  if (!chatId || !text) return new Response("ok");

  // –ö–æ–º–∞–Ω–¥–∞ /antineiroham ‚Äî –ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ @neirohambot –±–µ–∑ reply
  if (text.startsWith("/antineiroham")) {
    const reply = randomBotReply();
    await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text: reply,
        parse_mode: "Markdown",
      }),
    });
    return new Response("ok");
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
  if (!msg.from?.is_bot) {
    let replyText: string;

    if (username === CREATOR_USERNAME) {
      // –û—Ç–≤–µ—Ç —Ç–µ–±–µ, —Å–æ–∑–¥–∞—Ç–µ–ª—é
      replyText = "–û, –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòé";
    } else {
      // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      replyText = analyzeMessage(text);
    }

    await sendMessage(chatId, replyText, messageId);
  }

  return new Response("ok");
});







