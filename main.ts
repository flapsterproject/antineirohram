// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;

const BAD_WORDS = ["–±–ª—è", "—Å—É–∫–∞", "–Ω–∞—Ö—É–π", "–µ–±–∞—Ç—å", "–ø–∏–∑–¥–µ—Ü", "—Ö—É–π", "tt"];
const SARCASTIC_REPLIES = [
  "–û, –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ —á–∞—Ç–µ. –ê–∂ —É—à–∏ –∑–∞–≤—è–ª–∏ üéª",
  "–ú–∞–º–∞ –±—ã —Ç–æ–±–æ–π –≥–æ—Ä–¥–∏–ª–∞—Å—å. –ù—É –∏–ª–∏ –≤—ã–≥–Ω–∞–ª–∞ –∏–∑ –¥–æ–º–∞ ü§∑‚Äç‚ôÇÔ∏è",
  "–ü—Ä—è–º –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –ø—Ä–µ–º–∏—é *¬´–ü–æ—ç—Ç –ì–æ–¥–∞¬ª* üèÜ",
  "–î–∞-–¥–∞, –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –ª—é–¥–∏ –∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≥–µ–Ω–∏—è–º–∏ ü§°",
  "–°–ø–∞—Å–∏–±–æ, –º—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –≤–µ–ª–∏–∫–∏—Ö –º—ã—Å–ª–µ–π üìö",
];

function containsBadWord(text: string): boolean {
  return BAD_WORDS.some((word) => text.toLowerCase().includes(word));
}

function randomReply() {
  return SARCASTIC_REPLIES[Math.floor(Math.random() * SARCASTIC_REPLIES.length)];
}

async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_to_message_id: replyTo,
      parse_mode: "Markdown",
    }),
  });
}

async function deleteMessage(chatId: number, messageId: number) {
  await fetch(`${TELEGRAM_API}/deleteMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      message_id: messageId,
    }),
  });
}

serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) {
    return new Response("Bot is running.", { status: 200 });
  }

  if (req.method !== "POST") {
    return new Response("Method Not Allowed", { status: 405 });
  }

  const update = await req.json();
  console.log("üëâ UPDATE:", JSON.stringify(update, null, 2)); // –õ–û–ì–ò–ú –≤—Å—ë

  const message = update.message;
  const chatId = message?.chat?.id;
  const text = message?.text;
  const messageId = message?.message_id;

  if (!chatId || !text) {
    console.log("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
    return new Response("No message", { status: 200 });
  }

  if (message.chat.type === "group" || message.chat.type === "supergroup") {
    console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: ${text}`);
    if (containsBadWord(text)) {
      console.log("‚ùå –ú–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —É–¥–∞–ª—è–µ–º + –æ—Ç–≤–µ—á–∞–µ–º");
      await deleteMessage(chatId, messageId);
      await sendMessage(chatId, randomReply());
    }
  } else if (message.chat.type === "private") {
    console.log(`üì© –õ–∏—á–∫–∞: ${text}`);
    await sendMessage(chatId, "–Ø —Ä–∞–±–æ—Ç–∞—é, –Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö üòâ");
  }

  return new Response("OK", { status: 200 });
});


