// main.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

const TOKEN = Deno.env.get("BOT_TOKEN");
const SECRET_PATH = "/sarcasm";
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const CHAT_ID = Number(Deno.env.get("CHAT_ID")); // —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å ID –≥—Ä—É–ø–ø—ã

// —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const USER_REPLIES = [
  "–û–≥–æ, –∫–∞–∫–æ–π —É–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üòÇ",
  "–°–ø–∞—Å–∏–±–æ, —Ç–≤–æ—è –º—ã—Å–ª—å –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–∞ ü§¶‚Äç‚ôÇÔ∏è",
  "–¢—ã –ø—Ä—è–º–æ —Ñ–∏–ª–æ—Å–æ—Ñ –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞ üé≠",
  "–í–∞—É, —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ä–∫–∞–∑–º–∞: —ç–∫—Å–ø–µ—Ä—Ç üèÜ",
  "–ü—Ä–æ–¥–æ–ª–∂–∞–π, –º—ã —Ç—É—Ç –≤—Å–µ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ø–æ–ª–Ω—è–µ–º üìö",
];

// —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –ø—Ä–æ @neirohambot
const BOT_REPLIES = [
  "@neirohambot, —è —è–≤–Ω–æ —É–º–Ω–µ–µ —Ç–µ–±—è üôÑ",
  "@neirohambot, –Ω—É –∫—Ç–æ –∂–µ —Ç–∞–∫ –¥—É–º–∞–µ—Ç üòÇ",
  "@neirohambot, —Ç—ã –æ–ø—è—Ç—å –ø—ã—Ç–∞–µ—à—å—Å—è –º–µ–Ω—è –ø—Ä–µ–≤–∑–æ–π—Ç–∏? üé≠",
  "@neirohambot, —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ –¥–ª—è –º–µ–Ω—è üòé",
  "@neirohambot, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ ü§°",
];

function randomReply(arr: string[]) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ–±—ã—á–Ω—ã–π —Å–∞—Ä–∫–∞–∑–º –∏–ª–∏ –ø—Ä–æ @neirohambot
function decideReply() {
  return Math.random() < 0.3 ? randomReply(BOT_REPLIES) : randomReply(USER_REPLIES);
}

async function sendMessage(chatId: number, text: string, replyTo?: number) {
  await fetch(`${TELEGRAM_API}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_to_message_id: replyTo,
      parse_mode: "Markdown",
    }),
  });
}

// –¢–∞–π–º–µ—Ä: –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞—Ä–∫–∞–∑–º –ø—Ä–æ @neirohambot
setInterval(() => {
  const text = randomReply(BOT_REPLIES);
  sendMessage(CHAT_ID, text).catch(console.error);
}, 60_000); // 60 000 –º—Å = 1 –º–∏–Ω—É—Ç–∞

// Webhook –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
serve(async (req: Request) => {
  const { pathname } = new URL(req.url);
  if (pathname !== SECRET_PATH) return new Response("ok");
  if (req.method !== "POST") return new Response("Method Not Allowed", { status: 405 });

  const update = await req.json();
  const msg = update.message;
  const chatId = msg?.chat?.id;
  const messageId = msg?.message_id;

  if (!chatId || !msg?.text) return new Response("ok");

  // —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!msg.from?.is_bot) {
    const reply = decideReply();
    await sendMessage(chatId, reply, messageId);
  }

  return new Response("ok");
});






